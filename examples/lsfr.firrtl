;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit Lsfr : 
  module Lsfr : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : UInt<1>[8]}
    
    wire _T : UInt<1>[8] @[GenerateExamples.scala 26:28]
    _T[0] <= UInt<1>("h01") @[GenerateExamples.scala 26:28]
    _T[1] <= UInt<1>("h00") @[GenerateExamples.scala 26:28]
    _T[2] <= UInt<1>("h00") @[GenerateExamples.scala 26:28]
    _T[3] <= UInt<1>("h00") @[GenerateExamples.scala 26:28]
    _T[4] <= UInt<1>("h00") @[GenerateExamples.scala 26:28]
    _T[5] <= UInt<1>("h00") @[GenerateExamples.scala 26:28]
    _T[6] <= UInt<1>("h00") @[GenerateExamples.scala 26:28]
    _T[7] <= UInt<1>("h00") @[GenerateExamples.scala 26:28]
    reg reg : UInt<1>[8], clock with : (reset => (reset, _T)) @[GenerateExamples.scala 26:20]
    node _T_1 = xor(reg[3], reg[7]) @[GenerateExamples.scala 27:22]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[GenerateExamples.scala 27:13]
    reg[0] <= _T_2 @[GenerateExamples.scala 27:10]
    reg[1] <= reg[0] @[GenerateExamples.scala 29:12]
    reg[2] <= reg[1] @[GenerateExamples.scala 29:12]
    reg[3] <= reg[2] @[GenerateExamples.scala 29:12]
    reg[4] <= reg[3] @[GenerateExamples.scala 29:12]
    reg[5] <= reg[4] @[GenerateExamples.scala 29:12]
    reg[6] <= reg[5] @[GenerateExamples.scala 29:12]
    reg[7] <= reg[6] @[GenerateExamples.scala 29:12]
    io.out[0] <= reg[0] @[GenerateExamples.scala 31:10]
    io.out[1] <= reg[1] @[GenerateExamples.scala 31:10]
    io.out[2] <= reg[2] @[GenerateExamples.scala 31:10]
    io.out[3] <= reg[3] @[GenerateExamples.scala 31:10]
    io.out[4] <= reg[4] @[GenerateExamples.scala 31:10]
    io.out[5] <= reg[5] @[GenerateExamples.scala 31:10]
    io.out[6] <= reg[6] @[GenerateExamples.scala 31:10]
    io.out[7] <= reg[7] @[GenerateExamples.scala 31:10]
    
